{"version":3,"sources":["logo.svg","components/ChargesContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ChargesContainer","state","items","fetch","then","resp","json","data","console","log","catch","error","JSON","stringify","react_default","a","createElement","className","method","asp-action","type","asp-for","id","placeholder","style","color","scope","React","Component","App","ChargesContainer_ChargesContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mLCEnBC,6MACjBC,MAAQ,CACJC,MAAO,uFAIPC,MAAM,YACLC,KAAK,SAACC,GAAD,OAAUA,EAAKC,SACpBF,KAAK,SAASG,GACXC,QAAQC,IAAIF,KAEfG,MAAM,SAASC,GACZH,QAAQC,IAAIG,KAAKC,UAAUF,uCAK/B,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,0BAA0BC,OAAO,OAAOC,aAAW,UAC/DL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOH,UAAU,kCAAkCI,UAAQ,cAAcC,GAAG,SAASC,YAAY,mBAEjHT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOH,UAAU,kCAAkCI,UAAQ,YAAYC,GAAG,OAAOC,YAAY,iBAE7GT,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASH,UAAU,wBAAhC,WAEJH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,oCACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,uBAAuBO,MAAO,CAACC,MAAO,qBACnDX,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,oBAGAF,EAAAC,EAAAC,cAAA,kBAGAF,EAAAC,EAAAC,cAAA,gCAKRF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIU,MAAM,OAAV,KACAZ,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,mBAEJF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIU,MAAM,OAAV,KACAZ,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,uBAEJF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIU,MAAM,OAAV,KACAZ,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,8BAxDkBW,IAAMC,WCyBrCC,MAtBf,WACE,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAebH,EAAAC,EAAAC,cAACc,EAAD,QCVcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.2af151b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nexport default class ChargesContainer extends React.Component {\r\n    state = {\r\n        items: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch('api/item')\r\n        .then((resp) => resp.json())\r\n        .then(function(data) {\r\n            console.log(data);\r\n        })\r\n        .catch(function(error) {\r\n            console.log(JSON.stringify(error));\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <form className=\"form-inline float-right\" method=\"post\" asp-action=\"Create\">\r\n                    <div className=\"form-group mb-2\">\r\n                        <input type=\"text\" className=\"form-control-plaintext bg-light\" asp-for=\"Item.Amount\" id=\"amount\" placeholder=\"Charge Amount\" />\r\n                    </div>\r\n                    <div className=\"form-group mx-sm-3 mb-2\">\r\n                        <input type=\"text\" className=\"form-control-plaintext bg-light\" asp-for=\"Item.Type\" id=\"type\" placeholder=\"Charge Type\" />\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary mb-2\">Submit</button>\r\n                </form>\r\n                <table className=\"table table-bordered table-hover\">\r\n                    <thead className=\"table-dark text-dark\" style={{color: \"white !important\"}}>\r\n                        <tr>\r\n                            <th>\r\n                                Amount\r\n                            </th>\r\n                            <th>\r\n                                Type\r\n                            </th>\r\n                            <th>\r\n                                Transaction Date\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th scope=\"row\">1</th>\r\n                            <td>Mark</td>\r\n                            <td>Otto</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th scope=\"row\">2</th>\r\n                            <td>Jacob</td>\r\n                            <td>Thornton</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th scope=\"row\">3</th>\r\n                            <td >Larry the Bird</td>\r\n                            <td > Bird</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n @model PPOkNoJavascript.ViewModels.ItemDetailsViewModel\r\n@{\r\n    ViewData[\"Title\"] = \"Index\";\r\n}\r\n@*action=\"@Url.Action(\"Create\", \"Item\")\"*@\r\n<form className=\"form-inline float-right\" method=\"post\" asp-action=\"Create\">\r\n    <div className=\"form-group mb-2\">\r\n        <input type=\"text\" className=\"form-control-plaintext bg-light\" asp-for=\"Item.Amount\" id=\"amount\" placeholder=\"Charge Amount\">\r\n    </div>\r\n    <div className=\"form-group mx-sm-3 mb-2\">\r\n        <input type=\"text\" className=\"form-control-plaintext bg-light\" asp-for=\"Item.Type\" id=\"type\" placeholder=\"Charge Type\">\r\n    </div>\r\n    <button type=\"submit\" className=\"btn btn-primary mb-2\">Submit</button>\r\n</form>\r\n\r\n<h1>@Model.PageTitle</h1>\r\n\r\n<table className=\"table table-bordered table-hover\">\r\n    <thead className=\"table-dark text-dark\" style=\"color: white !important\">\r\n        <tr>\r\n            <th>\r\n                Amount\r\n            </th>\r\n            <th>\r\n                Type\r\n            </th>\r\n            <th>\r\n                Transaction Date\r\n            </th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        @foreach (var item in Model.Items.OrderByDescending(i => i.TransactionDate))\r\n        {\r\n            <tr>\r\n                <td>\r\n                    @Html.DisplayFor(modelItem => item.Amount)\r\n                </td>\r\n                <td>\r\n                    @Html.DisplayFor(modelItem => item.Type)\r\n                </td>\r\n                <td>\r\n                    @Html.DisplayFor(modelItem => item.TransactionDate)\r\n                </td>\r\n            </tr>\r\n        }\r\n    </tbody>\r\n</table>\r\n\r\n<table className=\"table table-bordered table-hover\">\r\n    <thead className=\"table-dark text-dark\" style=\"color: white !important\">\r\n        <tr>\r\n            <th>\r\n                Type\r\n            </th>\r\n            <th>\r\n                Amount\r\n            </th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        @foreach (var item in Model.Items.OrderBy(i => i.Amount))\r\n        {\r\n            <tr>\r\n                <td>\r\n                    @Html.DisplayFor(modelItem => item.Type)\r\n                </td>\r\n                <td>\r\n                    @Html.DisplayFor(modelItem => item.Amount)\r\n                </td>\r\n            </tr>\r\n        }\r\n    </tbody>\r\n</table>\r\n*/","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ChargesContainer from './components/ChargesContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <ChargesContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}